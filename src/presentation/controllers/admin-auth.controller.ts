import { Controller, Post, Body, HttpCode, HttpStatus, Logger } from '@nestjs/common';
import { AdminService } from '../../domains/admin/services/admin.service';
import { JwtService } from '../../infrastructure/auth/jwt.service';
import { AdminLoginDto, AdminLoginResponseDto } from '../../domains/admin/dto/admin-auth.dto';
import { ApiSuccessResponse } from '../../common/interfaces/api-response.interface';

@Controller('admin/auth')
export class AdminAuthController {
  private readonly logger = new Logger(AdminAuthController.name);

  constructor(
    private readonly adminService: AdminService,
    private readonly jwtService: JwtService,
  ) {}

  @Post('login')
  @HttpCode(HttpStatus.OK)
  async login(@Body() loginDto: AdminLoginDto): Promise<ApiSuccessResponse<AdminLoginResponseDto>> {
    this.logger.log(`Admin login attempt for: ${loginDto.emailOrUsername}`);

    const authResult = await this.adminService.authenticateAdmin({
      emailOrUsername: loginDto.emailOrUsername,
      password: loginDto.password,
    });

    if (!authResult.isAuthenticated) {
      this.logger.warn(`Failed login attempt for: ${loginDto.emailOrUsername}`);
      throw new Error('Authentication failed');
    }

    // Generate JWT token
    const tokens = await this.jwtService.generateAdminToken(
      authResult.admin.id,
      authResult.admin.role
    );
    const expiresIn = 8 * 60 * 60; // 8 hours in seconds

    this.logger.log(`Successful admin login for: ${authResult.admin.username}`);

    const responseData: AdminLoginResponseDto = {
      id: authResult.admin.id,
      email: authResult.admin.email,
      username: authResult.admin.username,
      role: authResult.admin.role,
      accessToken: tokens.accessToken,
      expiresIn,
    };

    return {
      success: true,
      data: responseData,
      message: 'Login successful',
      meta: {
        timestamp: new Date().toISOString(),
        traceId: 'generated-trace-id', // This would be generated by interceptor
      },
    };
  }
}