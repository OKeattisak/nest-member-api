import { Controller, Post, Body, HttpCode, HttpStatus, Logger } from '@nestjs/common';
import { ApiTags, ApiOperation, ApiResponse, ApiBody } from '@nestjs/swagger';
import { MemberService } from '../../domains/member/services/member.service';
import { JwtService } from '../../infrastructure/auth/jwt.service';
import { 
  MemberRegisterDto, 
  MemberLoginDto, 
  MemberLoginResponseDto,
  MemberProfileResponseDto 
} from '../../domains/member/dto/member-auth.dto';
import { ApiSuccessResponse } from '../../common/interfaces/api-response.interface';

@ApiTags('Member Auth')
@Controller('member/auth')
export class MemberAuthController {
  private readonly logger = new Logger(MemberAuthController.name);

  constructor(
    private readonly memberService: MemberService,
    private readonly jwtService: JwtService,
  ) {}

  @Post('register')
  @HttpCode(HttpStatus.CREATED)
  @ApiOperation({ 
    summary: 'Member registration',
    description: 'Register a new member account'
  })
  @ApiBody({
    type: MemberRegisterDto,
    description: 'Member registration data',
    examples: {
      example1: {
        summary: 'Member registration example',
        value: {
          email: 'member@example.com',
          username: 'member123',
          password: 'securePassword123',
          firstName: 'John',
          lastName: 'Doe'
        }
      }
    }
  })
  @ApiResponse({
    status: 201,
    description: 'Registration successful',
    schema: {
      type: 'object',
      properties: {
        success: { type: 'boolean', example: true },
        data: {
          type: 'object',
          properties: {
            id: { type: 'string', example: 'clm123456789' },
            email: { type: 'string', example: 'member@example.com' },
            username: { type: 'string', example: 'member123' },
            firstName: { type: 'string', example: 'John' },
            lastName: { type: 'string', example: 'Doe' },
            isActive: { type: 'boolean', example: true },
            createdAt: { type: 'string', example: '2023-01-01T00:00:00.000Z' },
            updatedAt: { type: 'string', example: '2023-01-01T00:00:00.000Z' }
          }
        },
        message: { type: 'string', example: 'Registration successful' }
      }
    }
  })
  async register(@Body() registerDto: MemberRegisterDto): Promise<ApiSuccessResponse<MemberProfileResponseDto>> {
    this.logger.log(`Member registration attempt for: ${registerDto.email}`);

    const member = await this.memberService.registerMember({
      email: registerDto.email,
      username: registerDto.username,
      password: registerDto.password,
      firstName: registerDto.firstName,
      lastName: registerDto.lastName,
    });

    this.logger.log(`Successfully registered member: ${member.username}`);

    const responseData: MemberProfileResponseDto = {
      id: member.id,
      email: member.email,
      username: member.username,
      firstName: member.firstName,
      lastName: member.lastName,
      isActive: member.isActive,
      createdAt: member.createdAt,
      updatedAt: member.updatedAt,
    };

    return {
      success: true,
      data: responseData,
      message: 'Registration successful',
      meta: {
        timestamp: new Date().toISOString(),
        traceId: 'generated-trace-id', // This would be generated by interceptor
      },
    };
  }

  @Post('login')
  @HttpCode(HttpStatus.OK)
  @ApiOperation({ 
    summary: 'Member login',
    description: 'Authenticate a member and return JWT token'
  })
  @ApiBody({
    type: MemberLoginDto,
    description: 'Member login credentials',
    examples: {
      example1: {
        summary: 'Member login example',
        value: {
          emailOrUsername: 'member@example.com',
          password: 'securePassword123'
        }
      }
    }
  })
  @ApiResponse({
    status: 200,
    description: 'Login successful',
    schema: {
      type: 'object',
      properties: {
        success: { type: 'boolean', example: true },
        data: {
          type: 'object',
          properties: {
            id: { type: 'string', example: 'clm123456789' },
            email: { type: 'string', example: 'member@example.com' },
            username: { type: 'string', example: 'member123' },
            firstName: { type: 'string', example: 'John' },
            lastName: { type: 'string', example: 'Doe' },
            accessToken: { type: 'string', example: 'eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9...' },
            expiresIn: { type: 'number', example: 86400 }
          }
        },
        message: { type: 'string', example: 'Login successful' }
      }
    }
  })
  async login(@Body() loginDto: MemberLoginDto): Promise<ApiSuccessResponse<MemberLoginResponseDto>> {
    this.logger.log(`Member login attempt for: ${loginDto.emailOrUsername}`);

    const authResult = await this.memberService.authenticateMember({
      emailOrUsername: loginDto.emailOrUsername,
      password: loginDto.password,
    });

    if (!authResult.isAuthenticated) {
      this.logger.warn(`Failed login attempt for: ${loginDto.emailOrUsername}`);
      throw new Error('Authentication failed');
    }

    // Generate JWT token
    const tokens = await this.jwtService.generateMemberToken(authResult.member.id);
    const expiresIn = 24 * 60 * 60; // 24 hours in seconds

    this.logger.log(`Successful member login for: ${authResult.member.username}`);

    const responseData: MemberLoginResponseDto = {
      id: authResult.member.id,
      email: authResult.member.email,
      username: authResult.member.username,
      firstName: authResult.member.firstName,
      lastName: authResult.member.lastName,
      accessToken: tokens.accessToken,
      expiresIn,
    };

    return {
      success: true,
      data: responseData,
      message: 'Login successful',
      meta: {
        timestamp: new Date().toISOString(),
        traceId: 'generated-trace-id', // This would be generated by interceptor
      },
    };
  }
}