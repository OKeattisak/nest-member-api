// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Member {
  id          String   @id @default(cuid())
  email       String   @unique
  username    String   @unique
  passwordHash String
  firstName   String
  lastName    String
  isActive    Boolean  @default(true)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  deletedAt   DateTime?
  
  points              Point[]
  memberPrivileges    MemberPrivilege[]
  transactionHistory  TransactionHistory[]
  
  @@map("members")
}

model Point {
  id          String    @id @default(cuid())
  memberId    String
  amount      Decimal   @db.Decimal(10, 2)
  type        PointType
  description String
  expiresAt   DateTime?
  isExpired   Boolean   @default(false)
  createdAt   DateTime  @default(now())
  
  member Member @relation(fields: [memberId], references: [id])
  
  @@map("points")
}

model Privilege {
  id           String   @id @default(cuid())
  name         String   @unique
  description  String
  pointCost    Decimal  @db.Decimal(10, 2)
  isActive     Boolean  @default(true)
  validityDays Int?
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
  
  memberPrivileges MemberPrivilege[]
  
  @@map("privileges")
}

model MemberPrivilege {
  id          String    @id @default(cuid())
  memberId    String
  privilegeId String
  grantedAt   DateTime  @default(now())
  expiresAt   DateTime?
  isActive    Boolean   @default(true)
  
  member    Member    @relation(fields: [memberId], references: [id])
  privilege Privilege @relation(fields: [privilegeId], references: [id])
  
  @@unique([memberId, privilegeId])
  @@map("member_privileges")
}

model Admin {
  id          String   @id @default(cuid())
  email       String   @unique
  username    String   @unique
  passwordHash String
  role        AdminRole @default(ADMIN)
  isActive    Boolean  @default(true)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  
  @@map("admins")
}

enum PointType {
  EARNED
  DEDUCTED
  EXPIRED
  EXCHANGED
}

enum AdminRole {
  SUPER_ADMIN
  ADMIN
}

model AuditLog {
  id          String    @id @default(cuid())
  entityType  String    // Member, Point, Privilege, MemberPrivilege, Admin
  entityId    String    // ID of the affected entity
  action      AuditAction
  actorType   ActorType // ADMIN, MEMBER, SYSTEM
  actorId     String?   // ID of the actor (admin/member), null for system actions
  oldValues   Json?     // Previous values (for updates)
  newValues   Json?     // New values (for creates/updates)
  metadata    Json?     // Additional context data
  ipAddress   String?   // IP address of the request
  userAgent   String?   // User agent string
  traceId     String?   // Request trace ID
  createdAt   DateTime  @default(now())
  
  @@index([entityType, entityId])
  @@index([actorType, actorId])
  @@index([action])
  @@index([createdAt])
  @@map("audit_logs")
}

model LoginAttempt {
  id            String        @id @default(cuid())
  emailOrUsername String
  actorType     ActorType     // ADMIN or MEMBER
  success       Boolean
  failureReason String?       // Reason for failure (invalid_credentials, account_inactive, etc.)
  ipAddress     String?
  userAgent     String?
  traceId       String?
  createdAt     DateTime      @default(now())
  
  @@index([emailOrUsername])
  @@index([actorType])
  @@index([success])
  @@index([createdAt])
  @@map("login_attempts")
}

model TransactionHistory {
  id            String            @id @default(cuid())
  memberId      String
  transactionType TransactionType
  entityType    String            // Point, Privilege
  entityId      String            // ID of the point or privilege
  amount        Decimal?          @db.Decimal(10, 2) // For point transactions
  description   String
  metadata      Json?             // Additional transaction details
  balanceBefore Decimal?          @db.Decimal(10, 2) // Point balance before transaction
  balanceAfter  Decimal?          @db.Decimal(10, 2) // Point balance after transaction
  traceId       String?
  createdAt     DateTime          @default(now())
  
  member Member @relation(fields: [memberId], references: [id])
  
  @@index([memberId])
  @@index([transactionType])
  @@index([entityType, entityId])
  @@index([createdAt])
  @@map("transaction_history")
}

enum AuditAction {
  CREATE
  UPDATE
  DELETE
  SOFT_DELETE
  ACTIVATE
  DEACTIVATE
  LOGIN
  LOGOUT
  POINT_ADD
  POINT_DEDUCT
  POINT_EXPIRE
  PRIVILEGE_EXCHANGE
  PRIVILEGE_GRANT
  PRIVILEGE_REVOKE
}

enum ActorType {
  ADMIN
  MEMBER
  SYSTEM
}

enum TransactionType {
  POINT_EARNED
  POINT_DEDUCTED
  POINT_EXPIRED
  POINT_EXCHANGED
  PRIVILEGE_GRANTED
  PRIVILEGE_EXPIRED
  PRIVILEGE_REVOKED
}
